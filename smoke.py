# Пример кода запуска тестирования на ВМ: python3 /CS_API/smoke.py http://192.168.26.130

import sys
import logging
import time

from CRM.crm_API import CRM
from calendars.calendars_API import Calendar
from community.community_API import Community
from files.file_API import Files
from mail.mail_API import Mail
from people.people_API import People
from authentication.auth_API import Authentication
from projects.project_API import Project
from settings.settings_API import CommonSettings

DATA_AUTH = {
    "userName": "support@r7-office.ru",
    "password": "#####"
    }

DATA_CREATE_USER = {
    "isVisitor": False,
    "email": "r7testmail@mail.ru",
    "firstname": "Ivan",
    "lastname": "Ivanov",
    "password": "#####"
    }

DATA_UPDATE_STATUS = {
    "userIds": ["0"]
    }

DATA_CREATE_DOC = {
    "title": "Test.DOCX"
    }

DATA_CREATE_TABLE = {
    "title": "Test.XLSX"
    }

DATA_CREATE_PRESENT = {
    "title": "Test.PPTX"
    }

DATA_DELETE_FILE = {
    "deleteAfter": True,
    "immediately": True
    }

DATA_CREATE_FOLDER = {
    "title": "My folder",
    }

DATA_DELETE_FOLDER = {
    "deleteAfter": True,
    "immediately": True
    }

DATA_CREATE_PROJECT = {
    "title": "New project",
    "responsibleID": "0",
    }

DATA_UPDATE_PROJECT = {
    "title": "Updated project",
    "description": "Updated description",
    "responsibleID": "0",
    "status": "Paused"
    }

DATA_CREATE_TASK = {
    "title": "Task",
    }

DATA_UPDATE_TASK = {
    "description": "Updated content",
    "priority": "Normal",
    "title": "Updated task",
    }

DATA_CREATE_MILESTONE = {
    "title": "Milestone",
    "deadline": "2024-01-01T06-30-00.000Z",
    "isKey": False,
    "isNotify": False,
    "description": "Some text",
    "responsible": "0",
    "notifyResponsible": False
    }

DATA_UPDATE_MILESTONE = {
    "title": "Updated milestone",
    "isKey": False,
    "description": "Updated content",
    "status": "Open"
    }

DATA_CREATE_DISCUSSION = {
    "title": "Discussion",
    "content": "Some text",
    "participants": [],
    "notify": False
    }

DATA_UPDATE_DISCUSSION = {
    "projectid": 1234,
    "title": "Updated discussion",
    "content": "Updated content",
    "participants": [],
    "notify": False
    }

DATA_CREATE_REPORT = {
    "name": "Report",
    "autoGenerated": True,
    "reportType": "MilestonesNearest",
    "reportTimeInterval": "Absolute",
    }

DATA_CREATE_PERSON = {
    "firstName": "Fedor",
    "lastName": "Fedorov",
    "shareType": "None"
    }

DATA_UPDATE_PERSON = {
    "firstName": "Fedorov",
    "lastName": "Fedorov",
    "shareType": "None"
    }

DATA_CREATE_COMPANY = {
    "companyName": "Company1"
    }

DATA_CREATE_CRM_TASK = {
    "title": "New task",
    "description": "Task content",
    "deadline": "2025-01-01T06-30-00.000Z",
    "responsibleId": "0",
    "categoryId": 1,
    }

DATA_UPDATE_CRM_TASK = {
    "title": "Updated task",
    "description": "Updated task content",
    "deadline": "2026-01-01T06-30-00.000Z",
    "responsibleid": "0",
    "categoryid": 1,
    "contactid": 1,
    "entityType": "Opportunity",
    "entityid": 1,
    "isNotify": True,
    }

DATA_CREATE_OPPORTUNITY = {
    "contactid": 0,
    "title": "Possible deal",
    "responsibleid": "0",
    "bidType": "FixedBid",
    "bidValue": 1000000,
    "bidCurrencyAbbr": "RUB",
    "perPeriodValue": 1,
    "stageid": 1,
    "isPrivate": True
    }

DATA_UPDATE_OPPORTUNITY = {
    "contactid": 0,
    "title": "Updated deal",
    "responsibleid": "0",
    "bidType": "FixedBid",
    "bidValue": 1000000,
    "bidCurrencyAbbr": "RUB",
    "perPeriodValue": 1,
    "stageid": 1,
    "isPrivate": True
    }

DATA_CREATE_INVOICE_ITEM = {
    "title": "Item1",
    "price": 1.1
    }

DATA_CREATE_INVOICE = {
    "number": f"invoice0001",
    "issueDate": "2023-12-12T06-30-00.000Z",
    "contactId": 10,
    "dueDate": "2025-06-01T00:00:00",
    "language": "es-ES",
    "currency": "RUB",
    "exchangeRate": 1.1,
    "terms": "Terms for this invoice",
    "invoiceLines":
    [{
         "invoiceItemID": 1,
         "description": "description for invoice line 1",
         "quantity": 100,
         "price": 7.7,
         "discount": 0
    }]
    }

DATA_UPDATE_INVOICE = {
    "issueDate": "2023-01-12T00:00:00",
    "contactId": 1,
    "dueDate": "2026-06-01T00:00:00",
    "language": "es-ES",
    "currency": "USD",
    "exchangeRate": 100.0,
    "terms": "Updated terms for this invoice",
    "invoiceLines":
    [{
         "invoiceItemID": 1,
         "description": "description for invoice line 1",
         "quantity": 100,
         "price": 7.7,
         "discount": 0
    }]
    }

DATA_CREATE_EVENT = {
    "contactId": 0,
    "content": "Exhibition",
    "categoryId": 1,
    }

DATA_GENERATE_REPORT = {
    "type": "WorkloadByDeals",
    "timePeriod": "DuringAllTime",
    "managers": [
        "0",
    ]
    }

DATA_UPDATE_COMPANY = {
    "companyName": "Updated company",
    "about": "Updated company content",
    "shareType": "None"
    }

DATA_CREATE_BLOG = {
    "title": "My blog",
    "content": "Blog content",
    "tags": "Me,Post,News",
    "subscribeComments": True
    }

DATA_UPDATE_BLOG = {
    "title": "Updated blog",
    "content": "Updated blog content",
    "tags": "Me,Post,News",
    "subscribeComments": True
}

DATA_CREATE_NEWS = {
    "title": "News",
    "content": "News content",
    "type": "News"
    }

DATA_UPDATE_NEWS = {
    "title": "Updated news",
    "content": "Updated news content",
    "type": "News"
    }

DATA_CREATE_FORUM = {
    "categoryId": -1,
    "categoryName": "Forum",
    "threadName": "Forum",
    "threadDescription": "Forum content"
    }

DATA_CREATE_TOPIC = {
    "subject": "Topic name",
    "content": "Topic content",
    "topicType": "Informational"
    }

DATA_UPDATE_TOPIC = {
        "subject": "Updated topic name"
    }

DATA_CREATE_WIKI_PAGE = {
    "name": "Wiki_page",
    "body": "Wiki content"
    }

DATA_UPDATE_WIKI_PAGE = {
    "body": "Updated Wiki content"
    }

DATA_CREATE_ACCOUNT = {
    "email": "r7testmail@mail.ru",
    "password": "8pJRfCMG0Uw9uVJfygXN"
    }

DATA_DELETE_ACCOUNT = {
  "email": "r7testmail@mail.ru"
    }

DATA_SEND_EMAIL = {
    "from": "Ivan Ivanov <r7testmail@mail.ru>",
    "to": ["Марат Сафин <safin.marat@r7-office.ru>"],
    "subject": "Test mail by API",
    "body": "This mail was sent by API method",
    "isReceipt": False
    }

DATA_CREATE_CALENDAR_EVENT = {
    "name": "New event",
    "description": "New event content",
    "startDate": "2023-10-10T06-30-00.000Z",
    "endDate": "2023-10-10T06-30-00.000Z",
    "repeatType": "RRULE:FREQ=NEVER",
    "alertType": "Never",
    "isAllDayLong": True,
    "sharingOptions": [
        {}
    ]
    }

DATA_UPDATE_CALENDAR_EVENT = {
    "name": "Updated event",
    "description": "Updated event content",
    "startDate": "2023-10-11T06-30-00.000Z",
    "endDate": "2023-10-11T06-30-00.000Z",
    "repeatType": "RRULE:FREQ=NEVER",
    "alertType": "Never",
    "isAllDayLong": True,
    "sharingOptions": [
        {}
    ]
    }

DATA_SHARE_FILE_FULL = {
        "share": [
            {
                "shareTo": "0",
                "access": 1
            }
        ],
        "notify": False,
        "advancedSettings": []
    }

DATA_SHARE_FILE_READ = {
        "share": [
            {
                "shareTo": "0",
                "access": 2
            }
        ],
        "notify": False,
        "advancedSettings": []
    }

DATA_MODULE_SECURITY_ACCESS = {
        "items": [
            {
                "Key": "one",
                "Value": True
            }
                ]
        }

logging.basicConfig(
    level=logging.INFO,  # Уровень логирования (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

# для запуска из PyCharm данный абзац должнен быть раскомментирован
# для запуска из терминала SSH данный абзац должнен быть закомментирован

# ------ начала абзаца ------
# if len(sys.argv) < 2:
#     print("***************************************************")
#     logging.error("Для запуска скрипта введите запрос вида: python3 /CS_API/smoke.py http://192.168.26.130,\
#     где аргумент http - это адрес ВМ с CS")
#     print("***************************************************")
# else:
#     URL = sys.argv[1]
# ------ конец абзаца ------

# для запуска из PyCharm данная строка должна быть раскомментирована и указан IP тестируемого CS сервера
# для запуска из терминала SSH данная строка должна быть закомментирована
URL = "http://192.168.26.91/"


def test_smoke(url=URL, data=DATA_AUTH):
    try:
        print(f'CS Server URL={url}')
        # Аутентификация
        auth = Authentication()
        auth.request_auth(url, data)

        # создание Пользователя
        people = People(url, data)
        user_id = people.create_user(DATA_CREATE_USER)

        # открыть доступ к модулям, к которым закрыт доступ (например, Сообщество)
        common_settings = CommonSettings(url, data)
        result = common_settings.get_security_settings()
        list_ = [val['webItemId'] for val in result['response'] if val['enabled'] is False]

        for i, val in enumerate(list_):
            DATA_MODULE_SECURITY_ACCESS['items'][0]['Key'] = list_[i]
            DATA_MODULE_SECURITY_ACCESS['items'][0]['Value'] = True
            common_settings.set_module_security_access(DATA_MODULE_SECURITY_ACCESS)

        file = Files(url, data)
        # создание Документа
        doc_id = file.create_file(DATA_CREATE_DOC)
        time.sleep(3)
        # удаление Документа
        file.delete_file(doc_id, DATA_DELETE_FILE)
        # создание Таблицы
        table_id = file.create_file(DATA_CREATE_TABLE)
        time.sleep(3)
        # удаление Таблицы
        file.delete_file(table_id, DATA_DELETE_FILE)
        # создание Презентации
        presentation_id = file.create_file(DATA_CREATE_PRESENT)
        time.sleep(3)
        # удаление Презентации
        file.delete_file(presentation_id, DATA_DELETE_FILE)

        # создание Папки
        folder_id = file.create_folder(DATA_CREATE_FOLDER)
        time.sleep(3)
        # удаление Папки
        file.delete_folder(DATA_DELETE_FOLDER, folder_id)

        # создание файлов
        doc_id_2 = file.create_file(DATA_CREATE_DOC)
        table_id_2 = file.create_file(DATA_CREATE_TABLE)
        # выдача Пользователю прав "Полный доступ" на Документ
        data_share_file_full = DATA_SHARE_FILE_FULL
        data_share_file_full["share"][0]["shareTo"] = user_id
        file.share_file(data_share_file_full, doc_id_2)
        # выдача Пользователю прав "Чтение" на Таблицу
        data_share_file_read = DATA_SHARE_FILE_READ
        data_share_file_read["share"][0]["shareTo"] = user_id
        file.share_file(data_share_file_read, table_id_2)
        # удаление файлов
        file.delete_file(doc_id_2, DATA_DELETE_FILE)
        file.delete_file(table_id_2, DATA_DELETE_FILE)

        project = Project(url, data)
        # создать проект
        data_project = DATA_CREATE_PROJECT
        data_project["responsibleID"] = user_id
        project_id = project.create_project(data_project)
        # создать веху
        data_milestone = DATA_CREATE_MILESTONE
        data_milestone["responsible"] = user_id
        milestone_id = project.create_milestone(data_milestone, project_id)
        # создать задачу
        task_id = project.create_task(DATA_CREATE_TASK, project_id)
        # создать обсуждение
        discussion_id = project.create_discussion(DATA_CREATE_DISCUSSION, project_id)

        # изменить проект
        data_update_project = DATA_UPDATE_PROJECT
        data_update_project["responsibleID"] = user_id
        project.update_project(data_update_project, project_id)
        # изменить веху
        project.update_milestone(DATA_UPDATE_MILESTONE, milestone_id)
        # изменить задачу
        project.update_task(DATA_UPDATE_TASK, task_id)
        # изменить обсуждение
        data_discussion = DATA_UPDATE_DISCUSSION
        data_discussion["projectid"] = project_id
        project.update_discussion(data_discussion, discussion_id)

        # создать отчет Ближайшие вехи
        project.create_report(DATA_CREATE_REPORT)

        # удалить обсуждение
        project.delete_discussion(discussion_id)
        # удалить задачу
        project.delete_task(task_id)
        # удалить веху
        project.delete_milestones(milestone_id)
        # удалить проект
        project.delete_project(project_id)

        crm = CRM(url, data)
        # создать персону
        person_id = crm.create_person(DATA_CREATE_PERSON)
        # создать компанию
        company_id = crm.create_company(DATA_CREATE_COMPANY)
        # создать задачу
        data_task = DATA_CREATE_CRM_TASK
        data_task["responsibleId"] = user_id
        task_crm_id = crm.create_task(data_task)
        # создать сделку
        data_opportunity = DATA_CREATE_OPPORTUNITY
        data_opportunity["contactid"] = company_id
        data_opportunity["responsibleid"] = user_id
        opportunity_id = crm.create_opportunity(data_opportunity)
        # создать счет
        item_id = crm.create_invoice_item(DATA_CREATE_INVOICE_ITEM)
        data_invoice = DATA_CREATE_INVOICE
        data_invoice["invoiceLines"][0]["invoiceItemID"] = item_id
        data_invoice["contactId"] = company_id
        invoice_id = crm.create_invoice(data_invoice)
        # создать мероприятие
        data_event = DATA_CREATE_EVENT
        data_event["contactId"] = person_id
        event_id = crm.create_event(data_event)

        # создать отчет Возможные сделки по менеджерам
        data_report = DATA_GENERATE_REPORT
        data_report["managers"][0] = user_id
        crm.generate_report(data_report)

        # изменить компанию
        crm.update_company(DATA_UPDATE_COMPANY, company_id)
        # изменить персону
        crm.update_person(DATA_UPDATE_PERSON, person_id)
        # изменить задачу
        admin_profile = people.get_my_profile()
        admin_id = admin_profile["response"]["id"]
        data_crm_task = DATA_UPDATE_CRM_TASK
        data_crm_task["responsibleid"] = admin_id
        data_crm_task["contactid"] = person_id
        data_crm_task["entityid"] = opportunity_id
        # изменить сделку
        data_update_opportunity = DATA_UPDATE_OPPORTUNITY
        data_update_opportunity["contactid"] = company_id
        data_update_opportunity["responsibleid"] = user_id
        crm.update_opportunity(data_update_opportunity, opportunity_id)
        # изменить счет
        data_update_invoice = DATA_UPDATE_INVOICE
        data_update_invoice["invoiceLines"][0]["invoiceItemID"] = item_id
        data_update_invoice["contactId"] = company_id
        crm.update_invoice(data_invoice, invoice_id)

        # удалить мероприятие
        crm.delete_event(event_id)
        # удалить счет
        crm.delete_invoice(invoice_id)
        # удалить задачу
        crm.delete_task(task_crm_id)
        # удалить сделку
        crm.delete_opportunity(opportunity_id)
        # удалить персону
        crm.delete_contact(person_id)
        # удалить компанию
        crm.delete_contact(company_id)

        community = Community(url, data)
        # создать форум
        forum_id = community.create_forum(DATA_CREATE_FORUM)
        # создать блог
        blog_id = community.create_blog_post(DATA_CREATE_BLOG)
        # создать новость
        event_id = community.create_event(DATA_CREATE_NEWS)
        # создать тему
        topic_id = community.create_forum_topic(DATA_CREATE_TOPIC, forum_id)

        # изменить блог
        community.update_blog_post(DATA_UPDATE_BLOG, blog_id)
        # изменить новость
        community.update_event(DATA_UPDATE_NEWS, event_id)
        # изменить тему форума
        community.update_forum_topic(DATA_UPDATE_TOPIC, topic_id)

        # удалить блог
        community.delete_blog_post(blog_id)
        # удалить новость
        community.delete_event(event_id)
        # удалить форум
        community.delete_forum(forum_id)

        # создать сообщение в чате
        # вложить файл в сообщение

        calendar = Calendar(url, data)
        # создать событие в календаре
        calendar_event_id = calendar.create_event_default_calendar(DATA_CREATE_CALENDAR_EVENT)
        # изменить событие в календаре
        calendar.update_event(DATA_UPDATE_CALENDAR_EVENT, 1, calendar_event_id)
        # удалить событие в календаре
        calendar.delete_event(calendar_event_id)

        # создать аккаунт в почте
        mail = Mail(url, data)
        mail.create_account_by_email_password(DATA_CREATE_ACCOUNT)
        # получить список писем
        mail.get_mail_operation()
        # отправить письмо
        mail.send_email(DATA_SEND_EMAIL)
        # удаление аккаунта
        mail.delete_account(DATA_DELETE_ACCOUNT)

        # удаление Пользователя
        data_user_status = DATA_UPDATE_STATUS
        data_user_status["userIds"][0] = user_id
        people.update_user_status(data_user_status, "Terminated")
        people.delete_user(user_id)

    except Exception:
        print("***************************************************")
        logging.info('Ошибка SMOKE тестирования CS', Exception)
        print("***************************************************")

    else:
        print("***************************************************")
        logging.info('SMOKE тестирование CS прошло успешно')
        print("***************************************************")


test_smoke()
